<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qyt.management.storage.stock.dao.StockMapper">
	<resultMap id="BaseResultMap" type="com.qyt.management.storage.stock.domain.Stock">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="product_id" property="productId" jdbcType="INTEGER" />
		<result column="warehouse_id" property="warehouseId" jdbcType="INTEGER" />
		<result column="product_name" property="productName" jdbcType="VARCHAR" />
		<result column="product_category" property="productCategory"
			jdbcType="VARCHAR" />
		<result column="num" property="num" jdbcType="INTEGER" />
		<result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
		<result column="created_by" property="createdBy" jdbcType="INTEGER" />
		<result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
		<result column="updated_by" property="updatedBy" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		id, product_id, warehouse_id, product_name, product_category, num,
		created_at, created_by,
		updated_at, updated_by
	</sql>
    <select id="selectEntityById" resultType="com.qyt.management.storage.stock.domain.Stock" parameterType="int">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM stock
        WHERE id = #{value}
    </select>

	<delete id="deleteEntity" parameterType="java.lang.Integer">
		delete from stock
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insertEntity" parameterType="com.qyt.management.storage.stock.domain.Stock" useGeneratedKeys="true"
			keyColumn="id" keyProperty="id">
		insert into stock
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="productId != null">
				product_id,
			</if>
			<if test="warehouseId != null">
				warehouse_id,
			</if>
			<if test="productName != null">
				product_name,
			</if>
			<if test="productCategory != null">
				product_category,
			</if>
			<if test="num != null">
				num,
			</if>
			<if test="createdAt != null">
				created_at,
			</if>
			<if test="createdBy != null">
				created_by,
			</if>
			<if test="updatedAt != null">
				updated_at,
			</if>
			<if test="updatedBy != null">
				updated_by,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="productId != null">
				#{productId,jdbcType=INTEGER},
			</if>
			<if test="warehouseId != null">
				#{warehouseId,jdbcType=INTEGER},
			</if>
			<if test="productName != null">
				#{productName,jdbcType=VARCHAR},
			</if>
			<if test="productCategory != null">
				#{productCategory,jdbcType=VARCHAR},
			</if>
			<if test="num != null">
				#{num,jdbcType=INTEGER},
			</if>
			<if test="createdAt != null">
				#{createdAt,jdbcType=TIMESTAMP},
			</if>
			<if test="createdBy != null">
				#{createdBy,jdbcType=INTEGER},
			</if>
			<if test="updatedAt != null">
				#{updatedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="updatedBy != null">
				#{updatedBy,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateEntity" parameterType="com.qyt.management.storage.stock.domain.Stock">
		update stock
		<set>
			<if test="productId != null">
				product_id = #{productId,jdbcType=INTEGER},
			</if>
			<if test="warehouseId != null">
				warehouse_id = #{warehouseId,jdbcType=INTEGER},
			</if>
			<if test="productName != null">
				product_name = #{productName,jdbcType=VARCHAR},
			</if>
			<if test="productCategory != null">
				product_category = #{productCategory,jdbcType=VARCHAR},
			</if>
			<if test="num != null">
				num = #{num,jdbcType=INTEGER},
			</if>
			<if test="updatedAt != null">
				updated_at = #{updatedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="updatedBy != null">
				updated_by = #{updatedBy,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>


    <select id="selectEntities" resultType="com.qyt.management.storage.stock.domain.Stock" parameterType="map">
        SELECT a.*,b.name warehouse_name,b.type warehouse_type,p.min_number FROM stock a
		join warehouses b on a.warehouse_id = b.id
		LEFT JOIN products p on a.product_id=p.id
        <include refid="sp_where"></include>
        order by
        <if test="field !=null and field !=''">
            ${sortInfo} ,
        </if>
        a.updated_at desc
        limit #{start} , #{limit}
    </select>

    <select id="selectEntitiesCount" resultType="int" parameterType="map">
        SELECT count(*) FROM stock a
		join warehouses b on a.warehouse_id = b.id
		LEFT JOIN products p on a.product_id=p.id
        <include refid="sp_where"></include>
    </select>

    <sql id="sp_where">
		<where>
			<if test="condition!=null and condition.productName !=  null">
				AND a.product_name  like concat('%' , #{condition.productName} , '%')
			</if>
			<if test="condition!=null and condition.warehouseId != null and condition.warehouseId gt 0">
				AND a.warehouse_id  =  #{condition.warehouseId}
			</if>
		</where>
    </sql>

	<select id="findOnByParam" resultType="com.qyt.management.storage.stock.domain.Stock" parameterType="map">
		select * from stock where 1=1
		<if test="productId != null and productId != 0">
			and product_id = #{productId}
		</if>
		<if test="warehouseId != null and warehouseId != 0">
			and warehouse_id = #{warehouseId}
		</if>
		<if test="type != null and type != 0">
			and type = #{type}
		</if>
		limit 1
	</select>


	<select id="selectAllEntities" resultType="com.qyt.management.storage.stock.domain.Stock" >
		select a.*,b.name warehouse_name,p.min_number from stock a
		join warehouses b on a.warehouse_id = b.id
		LEFT JOIN products p on a.product_id=p.id
	</select>

</mapper>